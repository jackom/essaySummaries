命令行界面(command line interface)，简称CLI

我们将在 Mac 上使用的 CLI 是通过运行名为终端（Terminal）的应用程序来访问。打开终端后，你将进入一个称之为 shell 的 CLI。有很多不同种类的 shell，在 Mac 中，默认类型为 bash。在这个 shell 环境中，用户输入一条文本命令，键盘点击 RETURN 键运行该命令，在计算机完成指令后收到响应或输出。（译者注： shell 字面意思为“壳”，与内核（kernel）相对应，此处理解为“命令解释器”，是用户与系统内核交互的接口，用户输入对应的标准命令，shell 通过解析命令来完成用户需要的操作，响应或输出。不同种类的 shell 之间语法略有不同。）

#####课程1：配置python环境的命令行教程第一部分-导航目录 有不少好用的命令

当我们在命令行工作时，我们将把文件夹称为目录。

计算机的文件和文件夹的结构就像一棵树。最开始是根目录，最终分支到许多其他文件夹（每个文件夹都有可能包含更多的文件夹和文件）。当我们浏览计算机文件系统时，我们在做的，实际上是在这个类似树结构的某些分支上来回走动。当我们进入一个命令行界面时，我们应该将自己看作是位于计算机上的某个特定位置 —— 这意味着我们目前位于某个目录中。默认情况下，当我们打开 shell 时，我们从计算机上的 Home 文件夹开始，用一个波浪符号（~）表示。

注意： 默认情况下，当我们打开 shell 时，我们将从我们电脑的主目录开始，在命令提示符里以一个波浪符号(~)表示。你自己的计算机主目录路径可能会因你的用户名和操作系统而异。

注意： 如果要查看目录中的所有文件（包括隐藏的文件），可以添加一个标志 - ls -a - 列出所有内容。隐藏的文件将在它们的名称前面出现一个 .。

#####cd 命令
回想以下，当你打开 shell 时，你是从你的计算机主目录开始的，缩写为~提示符。如果要从主目录跳转到另一个目录，可以使用 cd 命令，意为更改目录（change directory）。

#####mkdir 命令
mkdir 是我们用来创建目录的命令（通常发音为 make-dir 或者 “M”-“K”-“dir”），它会创建由我们提供的名称命名的新文件夹。

######创建多个目录
我们也可以通过提供以空格分开的所有目录名称的形式使用 mkdir 命令一次性批量创建多个目录。例如，要在 animals 目录中创建 marsupials、cloven_hoofed_animals 和 carnivores 目录，我们可以编写如下命令行：

<pre><code>~/Desktop/animals $ mkdir marsupials cloven_hoofed_animals carnivores</code></pre>
注意： 你应该避免在目录名和文件名中使用空格（而是使用下划线如 cloven_hoofed_animals）。如果不可避免 —— 也许遇到以前创建的文件或目录名称中有空格，可以在空格之前插入一个转义字符（\），告诉 shell 如何正确得解释文件名中的空格，比如 mkdir cloven\ hoofed\ animals。

#####touch 命令
在工作目录中创建一个文件
到目前为止，你最有可能创建并保存文件的方式就是使用一个特定的应用程序 —— 比如：在 Microsoft Word 中创建一个 .docx 文件、在 Adobe Acrobat 中创建一个 .pdf 文件、或者在文本编辑器中创建一个 .html 文件。在命令行中，你可以使用 touch 命令在你的工作目录下创建一个文件。touch 命令会创建一个带有你提供的名称和文件扩展名的新（空）文件。例如，如果你在 Desktop 目录中，想要在该目录创建一个文件 first_file.txt，你可以键入如下命令：

<pre><code>~/Desktop $ touch first_file.txt</code></pre>
包含文件扩展名（在以上示例中是.txt）是至关重要的，因为它设置了文件类型。

######在工作目录以外的目录中创建文件
你也可以使用 touch 命令在其他目录而不是当前目录创建新文件。创建方法是在文件名前面 添加 通往文件存放位置的路径。例如，要在 Desktop 工作目录中，创建位于更深层的文件结构中的文件 capybara.txt，给定以下文件结构：

示例文件结构：

- 主目录 ~ → Desktop 目录 → animals 目录 → rodents 目录 → capybara.txt 文件
要创建该文件，需要运行以下命令：

<pre><code>~/Desktop $ touch animals/rodents/capybara.txt</code></pre>

######创建多个文件
你可以通过提供多个文件名（包括任何适当的前置路径），以空格分隔，通过 touch 命令创建多个文件。例如，下面的代码将创建两个文件：

- 一个文件叫做 kangaroo.txt 位于： ~ → Desktop → animals → marsupials
- 另一个文件叫做 giraffe.txt 位于： ~ → Desktop → animals → cloven_hoofed_animals

<pre><code>~/Desktop $ touch animals/marsupials/kangaroo.txt animals/cloven_hoofed_animals/giraffe.txt/</code></pre>

######创建不同的文件类型
最后，请注意，使用 touch 命令不仅仅限于创建文本文件，你可以创建任何文件类型。例如，以下命令将在 Desktop 工作目录中创建一个名为 test.py 的 Python 文件：

<pre><code>~/Desktop $ touch test.py</code></pre>

#####删除文件
rm 命令
你可以使用 rm 命令（意为删除 remove）删除指定的文件。请注意这个删除是永久的 —— 它不能被逆转。只有当你确定想删除某些东西时，才使用 rm。
我们来看一个例子。如果要删除位于 Desktop 目录中的名为 first_file.txt 的文件，则可以运行以下命令：

<pre><code>~/Desktop $ rm first_file.txt</code></pre>

删除多个文件可以通过提供以空格分隔的文件名列表来实现。例如，下面的图片演示中，我们使用 touch 命令在 Desktop 目录下创建三个文本文件 —— apples.txt、carrots.txt 和 fruits.txt —— 然后使用 rm 命令删除（永久删除）这些文件。完成此次删除的代码如下：

<pre><code>$ rm apples.txt carrots.txt fruits.txt`</code></pre>

#####删除目录
你刚刚学习了如何使用 rm 命令删除文件。在这里，我们将讲授两种方式来删除目录：

- 使用 rmdir 命令
- 使用 rm -r 命令（注意：谨慎操作）

######rmdir 命令
rmdir 命令可以用来删除目录，但是要注意，它只能删除空目录。例如，你可以使用 mkdir 在 Desktop 目录内创建一个名为 cats 的目录。因为 cats 只是一个空目录（没有添加任何东西），你可以使用 rmdir 命令删除 cats 目录；

但是，如果你尝试在不为空的目录上运行 rmdir，则会收到一条错误消息。例如，如果你创建一个 cats 目录，然后向其中添加文件（例如 munchkin.txt 和 tabby.rb），那么你将无法使用 rmdir 删除 cats 目录。会报异常：Directory not empty

######rm -r 命令
如上所述，使用 rmdir 删除目录有一些限制，因为它只能删除空目录。在这里，你将学习如何删除包括内容的目录，通过执行稍微不同版本的 rm，你之前用来删除文件的命令。

要删除目录，可以在 rm 命令中添加一个名为 flag（标记）或 option（选项）的内容。标记提供额外的执行指令，位于命令名和参数之间，用短划线符号（-）表示。我们将在本节中使用的完整命令是 rm -r，其中 r 代表 recursive（递归）。

警告： 在继续之前，你应该知道递归删除意味着删除目录的所有内容 —— 包括其文件、子目录以及这些子目录中的所有文件等等。此外，使用 rm -r 删除是一个永久的动作。你可以使用一行简单的代码不可逆地删除大量文件。

我们来看一个例子。如果要删除位于 Desktop 目录中的名为 cats 的非空目录，则可以使用以下命令：

<pre><code>~/Desktop $ rm -r cats</code></pre>

如果你想要被要求确认删除目录中包含的各个项目，则可以将 interactive（互动）-i 标记添加到命令中，或将其与 -r 标记结合（例如rm -ri）或通过单独添加（例如 rm -r -i）。举例来说，如果 cats 目录碰巧包含两个文件（file_1.txt 和 file_2.txt）和四个子目录（calico、persian、scottish_fold 和 siamese），你可以使用以下命令，在确认要删除的几个内容后再删除 cats 目录：

<pre><code>~/Desktop $ rm -ri cats</code></pre>
要进行这些确认，你可以直接输入 yes 或 y。

####命令行总结
在上述命令行教程中，你学习了如何执行以下命令：

- ls: 列出目录内容
- cd: 前往其他目录
- pwd: 显示当前目录（也就是工作目录）
- open / start：打开一个文件（分别在 Mac 和 Windows 电脑上）
- touch：创建一个特定扩展名或文件类型的新文件
- mkdir：创建一个新目录
- rm：永久删除一个文件
- rmdir：永久删除一个空目录
- rm -r：永久删除一个目录及其内容（无确认过程，请谨慎使用！)
- rm -ri：永久删除一个目录及其内容（有确认过程)

- 计算机（computer）
- 程序（program）
- 精确步骤（precise sequence of steps）
- 计算（computation）
- 高层级语言（high-level language）
- 输入（input）
- 解释器（interpreter）

python被称为一个解释程序，这说明它会运行我们的程序，解释它们

歧义(ambiguity)

采用一种巴克斯范式(Backus-Naur Form)的注释法书写语法

<Non-terminal> -> replacement

python表达式：

- Expression -> Expression Operator Expression
- Expression -> (Expression)

Expression 缩写 Expr

python中，我们不能把数字和字符串合并在一起，但是我们可以对字符串做乘法。例如：print '!' * 3，那么将输出 三个 !,如：!!!

查找字符串中的字符串，使用find方法，<string>.find(<str>),返回的是要查找的字符串在总的字符串中第一次出现的位置(posiiton)，以index为0开始计算，如果找不到，那么将会返回-1

<pre><code>>>> a = 'abfo12'
>>> print a[1:4]
bfo
>>> print a[4:1]

>>>
</code></pre>

<pre><code>def say_hello(name):
    greeting = "Hello " + name + "!"
    return greeting

print say_hello("Miriam")
print say_hello("Andy")</code></pre>
得到的 输出 是这样的：

<pre><code>Hello Miriam!
Hello Andy!</code></pre>

sum 过程的作用是什么？

<pre><code>def sum(a, b):
    a = a + b</code></pre>

答案：什么也不做，因为没有return a这样的代码

下面的代码中，sum 过程的作用是什么？

<pre><code>def sum(a, b):
    a = a + b #注意：第一个a是变量
    return a</code></pre>
    
答案：输入两个数字，输出它们的和 或 
输入两个字符串，输出它们合并后的字符串

###函数定义及使用：

####在函数定义的第一行……
- 必须以 def（小写）开始。
- 在 def 后面，必须给出函数名（在这个例子中，函数名为 udacify）。
- 接下来是括号，里面包含所需的参数。
- 该行必须以冒号 : 结尾。
####在函数的主体中
- 函数的每一行必须缩进。
- 如果想让函数输出结果，必须使用 return 语句结束。
####“调用（call）”函数……
“调用”一个函数的意思就是使用该函数，你需要写：

- 函数名，后面跟着…
- …左括号 (，后面跟着…
- 所需的参数值，后面跟着…
- …右括号 )


python中：
<pre><code>print "hello" == "hello"</code></pre>
结果为true
    
<pre><code>if 10 > 20: 
    print "Did you know that 10 is greater than 20!?"
else:
    print "20 is greater than 10"</code></pre>
    
<pre><code>print True or False
print False or True
print True or True
print False or False
print False or this_is_an_error
print True or this_is_an_error
print this_is_an_error or True</code></pre>

执行结果如下：True True True False False True 提示this_is_an_error未定义

备注：这里面的True和False不能写成true或false，不然会提示true或false未定义的异常


<pre><code># This uses a while loop to remove all the spaces from a string of
# text. Can you figure out how it works?
def remove_spaces(text):
    text_without_spaces = '' #empty string for now
    while text != '':
        next_character = text[0]
        if next_character != ' ':    #that's a single space
            text_without_spaces = text_without_spaces + next_character
        text = text[1:]
    return text_without_spaces
print remove_spaces("hello my name is andy how are you?")</code></pre>

结果：hellomynameisandyhowareyou?

python中，字符串 + 数字会报错
<pre><code>def printInches(n):
    print n + " inches"
printInches(42)</code></pre>

报错为：<pre><code>TypeError: unsupported operand type(s) for +: 'int' and 'str'</code></pre>
改为如下即可：
<pre><code>def printInches(n):
    print str(n) + " inches"
printInches(42)</code></pre>


 <pre><code>print "# location", location</code></pre>
 
####调试策略总结
在这节课里，我们介绍了 5 种调试策略。

- 当程序崩溃时，查看错误消息

	######Python Traceback 的最后一行将告诉你哪里出错了。从这里往前阅读可以帮你找到出现问题的地方。
- 在示例代码的基础上编写代码
	######如果修改后的代码不能运行，注释掉编写的代码，并逐步修改示例代码，直到达到期望的结果。
- 确保示例代码可以运行
	######找到示例代码并不能保证示例代码能够在你的系统里运行。检查正在使用的示例代码，确保能按照你的预期运行。
- 检查（输出）中间结果
	######当你的代码没有崩溃，但是行为没有达到预期效果时，你可以向程序中添加输出语句，看看代码中的哪些部分开始出错了。
- 保留并对比旧版本
	######当你的代码可以运行时，先保存一个版本，然后再向其中添加代码。这样如果你引入了太多新的 bug，还可以返回到该版本。
	
####良好的注释内容可以帮助调试代码
#####1) 不要为“作用明显的代码”添加注释
######随着你的编程技能不断增长，“作用明显的代码”的含义也会改变，但是一般而言，如果代码含义清晰，无需解释，则不需要为其添加注释。以下注释就是多余的：

 <pre><code>print "Hello" # prints hello</code></pre>
直接写 print "Hello" 就够了。

####2) 定义函数时添加注释
######所有函数开始定义时都需要添加注释，描述预期的输入和输出结果，并解释函数的作用。这样可以帮助其他人了解函数的目的。例如：

 <pre><code>def isLeapYear(year):
    # takes a number as input and outputs True if the number
    # represents a leap year and False otherwise</code></pre>
######在 Python（并非所有语言）中，你还可以使用 docstring 为函数添加注释。docstring 是多行字符串，充当函数的描述性注释，但是当代码执行时，计算机会保留这些内容，并且在代码运行时用户可以访问这些内容。

 <pre><code>def isLeapYear(year):
    '''takes a number as input and outputs True if the number
    represents a leap year and False otherwise'''</code></pre>
######在 IPND 中，你可以选择使用注释或 docstring，但是应该保持一致。类（将在第 3 阶段介绍） 也应该遵守这一规则。

####3) 及时更新注释
######如果你更改代码后，没有更新注释的话，则很容易令人困惑。确保及时更新注释，避免阅读代码的其他人（或者你自己很长时间之后再去阅读这些代码）感到迷惑不清。毕竟注释的主要目的就是当代码出现错误时，帮助其他人了解你的代码应该实现的作用。如果你的注释提供了错误的信息，则很难实现这一目的!

####4) 简明扼要
######注释应该简短，仅解释代码最重要的信息。如果你需要写很长的注释来解释不容易看懂的代码部分，那么可能需要重新思考解决问题的方法了。通常，完善的代码只需少量的注释。写的很差的代码可能需要大量注释去解释！

计算中位数：
 <pre><code>def bigger(a,b):
    if a > b:
        return a
    else:
        return b
def biggest(a,b,c):
    return bigger(a,bigger(b,c))
def median(a, b, c):
    big = biggest(a,b,c)
    if big == a:
        return bigger(b, c)
    if big == b:
        return bigger(a, c)
    if big == c:
        return bigger(a, b)
print(median(1,2,3))
print(median(9,3,6))
print(median(7,8,7))</code></pre>

随机数：
 <pre><code>from random import randint
def random_verb():
    # your code here 
    random_num = randint(0, 1)
    if random_num == 0:
        return 'run'
    if random_num == 1:
        return 'kayak'
print random_verb()</code></pre>

